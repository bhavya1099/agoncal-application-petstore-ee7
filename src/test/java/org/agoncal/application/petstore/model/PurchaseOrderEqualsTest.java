
// ********RoostGPT********
/*
Test generated by RoostGPT for test javaspring-unit-test using AI Type Open AI and AI Model gpt-4

Test generated by RoostGPT for test javaspring-unit-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=equals_a4394b85c4
ROOST_METHOD_SIG_HASH=equals_e72790a55e

"""
Scenario 1: Testing equality with the same object
Details:
  TestName: testEqualsWithSameObject
  Description: This test checks if the equals method returns true when the same object is compared with itself.
Execution:
  Arrange: Create a PurchaseOrder object.
  Act: Invoke the equals method by passing the same object as a parameter.
  Assert: Assert that the returned value is true.
Validation:
  The equals method should return true when the same object is compared with itself. This is a basic property of the equals method and is important to ensure that the method behaves as expected.

Scenario 2: Testing equality with a null object
Details:
  TestName: testEqualsWithNullObject
  Description: This test checks if the equals method returns false when a null object is compared.
Execution:
  Arrange: Create a PurchaseOrder object.
  Act: Invoke the equals method by passing a null object as a parameter.
  Assert: Assert that the returned value is false.
Validation:
  The equals method should return false when a null object is compared. This is a basic property of the equals method and is important to ensure that the method behaves as expected.

Scenario 3: Testing equality with a different class object
Details:
  TestName: testEqualsWithDifferentClassObject
  Description: This test checks if the equals method returns false when an object of a different class is compared.
Execution:
  Arrange: Create a PurchaseOrder object and an object of a different class.
  Act: Invoke the equals method by passing the different class object as a parameter.
  Assert: Assert that the returned value is false.
Validation:
  The equals method should return false when an object of a different class is compared. This is a basic property of the equals method and is important to ensure that the method behaves as expected.

Scenario 4: Testing equality with an object having the same orderDate and customer
Details:
  TestName: testEqualsWithSameOrderDateAndCustomer
  Description: This test checks if the equals method returns true when an object having the same orderDate and customer is compared.
Execution:
  Arrange: Create two PurchaseOrder objects having the same orderDate and customer.
  Act: Invoke the equals method by passing the second object as a parameter to the equals method of the first object.
  Assert: Assert that the returned value is true.
Validation:
  The equals method should return true when an object having the same orderDate and customer is compared. This verifies that the equals method correctly identifies objects as equal based on their orderDate and customer.

Scenario 5: Testing equality with an object having a different orderDate
Details:
  TestName: testEqualsWithDifferentOrderDate
  Description: This test checks if the equals method returns false when an object having a different orderDate is compared.
Execution:
  Arrange: Create two PurchaseOrder objects having the same customer but different orderDate.
  Act: Invoke the equals method by passing the second object as a parameter to the equals method of the first object.
  Assert: Assert that the returned value is false.
Validation:
  The equals method should return false when an object having a different orderDate is compared. This verifies that the equals method correctly identifies objects as unequal based on their orderDate.

Scenario 6: Testing equality with an object having a different customer
Details:
  TestName: testEqualsWithDifferentCustomer
  Description: This test checks if the equals method returns false when an object having a different customer is compared.
Execution:
  Arrange: Create two PurchaseOrder objects having the same orderDate but different customer.
  Act: Invoke the equals method by passing the second object as a parameter to the equals method of the first object.
  Assert: Assert that the returned value is false.
Validation:
  The equals method should return false when an object having a different customer is compared. This verifies that the equals method correctly identifies objects as unequal based on their customer.
"""
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.junit.Test;
import org.junit.experimental.categories.Category;
import java.util.Date;
import static org.junit.Assert.*;
import javax.persistence.*;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

public class PurchaseOrderEqualsTest {

	@Test
	@Category(Categories.valid.class)
	public void testEqualsWithSameObject() {
		PurchaseOrder purchaseOrder = new PurchaseOrder();
		assertTrue(purchaseOrder.equals(purchaseOrder));
	}

	@Test
	@Category(Categories.invalid.class)
	public void testEqualsWithNullObject() {
		PurchaseOrder purchaseOrder = new PurchaseOrder();
		assertFalse(purchaseOrder.equals(null));
	}

	@Test
	@Category(Categories.invalid.class)
	public void testEqualsWithDifferentClassObject() {
		PurchaseOrder purchaseOrder = new PurchaseOrder();
		Object obj = new Object();
		assertFalse(purchaseOrder.equals(obj));
	}

	@Test
	@Category(Categories.valid.class)
	public void testEqualsWithSameOrderDateAndCustomer() {
		Date orderDate = new Date();
		Customer customer = new Customer();
		PurchaseOrder purchaseOrder1 = new PurchaseOrder();
		PurchaseOrder purchaseOrder2 = new PurchaseOrder();
		purchaseOrder1.setOrderDate(orderDate);
		purchaseOrder1.setCustomer(customer);
		purchaseOrder2.setOrderDate(orderDate);
		purchaseOrder2.setCustomer(customer);
		assertTrue(purchaseOrder1.equals(purchaseOrder2));
	}

	@Test
	@Category(Categories.invalid.class)
	public void testEqualsWithDifferentOrderDate() {
		Date orderDate1 = new Date();
		Date orderDate2 = new Date(orderDate1.getTime() + 10000);
		Customer customer = new Customer();
		PurchaseOrder purchaseOrder1 = new PurchaseOrder();
		PurchaseOrder purchaseOrder2 = new PurchaseOrder();
		purchaseOrder1.setOrderDate(orderDate1);
		purchaseOrder1.setCustomer(customer);
		purchaseOrder2.setOrderDate(orderDate2);
		purchaseOrder2.setCustomer(customer);
		assertFalse(purchaseOrder1.equals(purchaseOrder2));
	}

	@Test
	@Category(Categories.invalid.class)
	public void testEqualsWithDifferentCustomer() {
		Date orderDate = new Date();
		Customer customer1 = new Customer();
		Customer customer2 = new Customer();
		PurchaseOrder purchaseOrder1 = new PurchaseOrder();
		PurchaseOrder purchaseOrder2 = new PurchaseOrder();
		purchaseOrder1.setOrderDate(orderDate);
		purchaseOrder1.setCustomer(customer1);
		purchaseOrder2.setOrderDate(orderDate);
		purchaseOrder2.setCustomer(customer2);
		assertFalse(purchaseOrder1.equals(purchaseOrder2));
	}

}