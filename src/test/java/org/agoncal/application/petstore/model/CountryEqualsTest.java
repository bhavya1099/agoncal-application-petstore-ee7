// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model

ROOST_METHOD_HASH=equals_2a3d98178a
ROOST_METHOD_SIG_HASH=equals_e72790a55e

```
Scenario 1: Test equals with the same object instance

Details:
  TestName: testEqualsWithSameInstance
  Description: This test checks if the equals method returns true when the same object instance is passed as a parameter.
Execution:
  Arrange: Create an instance of the Country class and assign it to a variable.
  Act: Call the equals method on this instance, passing the same instance as the parameter.
  Assert: Assert that the returned value is true.
Validation:
  This test validates that the equals method correctly identifies the same object as equal. This is fundamental for ensuring object identity in memory is respected.

Scenario 2: Test equals with null object

Details:
  TestName: testEqualsWithNull
  Description: This test checks if the equals method returns false when null is passed as the parameter.
Execution:
  Arrange: Create an instance of the Country class.
  Act: Call the equals method on this instance, passing null as the parameter.
  Assert: Assert that the returned value is false.
Validation:
  This test ensures that the equals method handles null inputs gracefully without throwing an exception and correctly identifies that a Country object is not equivalent to null.

Scenario 3: Test equals with different class type

Details:
  TestName: testEqualsWithDifferentClass
  Description: This test checks if the equals method returns false when an object of a different class is passed as a parameter.
Execution:
  Arrange: Create an instance of the Country class and an instance of another class (e.g., Object).
  Act: Call the equals method on the Country instance, passing the Object instance as the parameter.
  Assert: Assert that the returned value is false.
Validation:
  This test verifies that the equals method can discern differences in class types, which is crucial for correct equality checks in a polymorphic environment.

Scenario 4: Test equals with two different Country instances having the same isoCode

Details:
  TestName: testEqualsWithIdenticalIsoCodes
  Description: This test verifies if the equals method returns true for two different Country instances that have the same isoCode value.
Execution:
  Arrange: Create two instances of the Country class with the same isoCode value but different other attributes.
  Act: Call the equals method on the first instance, passing the second instance as the parameter.
  Assert: Assert that the returned value is true.
Validation:
  This test confirms that the equals method correctly bases equality solely on the isoCode attribute as intended, ensuring consistent behavior across instances with matching identity codes.

Scenario 5: Test equals with two different Country instances having different isoCodes

Details:
  TestName: testEqualsWithDifferentIsoCodes
  Description: This test checks if the equals method returns false for two Country instances with different isoCode values.
Execution:
  Arrange: Create two instances of the Country class with different isoCode values.
  Act: Call the equals method on the first instance, passing the second instance as the parameter.
  Assert: Assert that the returned value is false.
Validation:
  This test ensures that the equals method accurately identifies instances as unequal when their isoCodes differ, which is key for correct identity distinction in data handling and processing.
```
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.junit.Test;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import org.junit.experimental.categories.Category;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.util.Objects;

public class CountryEqualsTest {

	@Test
	@Category(Categories.valid.class)
	public void testEqualsWithSameInstance() {
		Country country = new Country("US", "United States", "USA", "USA", "840");
		assertTrue(country.equals(country));
	}

	@Test
	@Category(Categories.invalid.class)
	public void testEqualsWithNull() {
		Country country = new Country("US", "United States", "USA", "USA", "840");
		assertFalse(country.equals(null));
	}

	@Test
	@Category(Categories.invalid.class)
	public void testEqualsWithDifferentClass() {
		Country country = new Country("US", "United States", "USA", "USA", "840");
		Object obj = new Object();
		assertFalse(country.equals(obj));
	}

	@Test
	@Category(Categories.valid.class)
	public void testEqualsWithIdenticalIsoCodes() {
		Country country1 = new Country("US", "United States", "USA", "USA", "840");
		Country country2 = new Country("US", "USA", "United States of America", "USA", "840");
		assertTrue(country1.equals(country2));
	}

	@Test
	@Category(Categories.invalid.class)
	public void testEqualsWithDifferentIsoCodes() {
		Country country1 = new Country("US", "United States", "USA", "USA", "840");
		Country country2 = new Country("CA", "Canada", "CAN", "CAN", "124");
		assertFalse(country1.equals(country2));
	}

}