
// ********RoostGPT********
/*
Test generated by RoostGPT for test javaspring-unit-test using AI Type Open AI and AI Model gpt-4

Test generated by RoostGPT for test javaspring-unit-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=equals_ad41e67803
ROOST_METHOD_SIG_HASH=equals_e72790a55e

"""
Scenario 1: Test when compared with a null object
TestName: testEqualsWithNullObject
Description: This test is meant to check whether the equals method returns false when the Category object is compared with null.
Execution:
  Arrange: Create a Category object.
  Act: Invoke equals method on the object and pass null as parameter.
  Assert: Assert that the equals method returns false.
Validation:
  The equals method should return false when compared with null. This is expected as a null object is not equivalent to any non-null object.

Scenario 2: Test when compared with itself
TestName: testEqualsWithItself
Description: This test is meant to check whether the equals method returns true when a Category object is compared with itself.
Execution:
  Arrange: Create a Category object.
  Act: Invoke equals method on the object and pass the object itself as parameter.
  Assert: Assert that the equals method returns true.
Validation:
  The equals method should return true when an object is compared with itself. This is expected as an object is always equal to itself.

Scenario 3: Test when compared with different class object
TestName: testEqualsWithDifferentClassObject
Description: This test is meant to check whether the equals method returns false when a Category object is compared with an object of different class.
Execution:
  Arrange: Create a Category object and an object of different class.
  Act: Invoke equals method on the Category object and pass the different class object as parameter.
  Assert: Assert that the equals method returns false.
Validation:
  The equals method should return false when a Category object is compared with an object of different class. This is expected as objects of different classes are not considered equal.

Scenario 4: Test when compared with Category object having different name
TestName: testEqualsWithDifferentNameCategory
Description: This test is meant to check whether the equals method returns false when a Category object is compared with another Category object having different name.
Execution:
  Arrange: Create two Category objects with different names.
  Act: Invoke equals method on one Category object and pass the other Category object as parameter.
  Assert: Assert that the equals method returns false.
Validation:
  The equals method should return false when a Category object is compared with another Category object having different name. This is expected as Category objects with different names are not considered equal.

Scenario 5: Test when compared with Category object having same name
TestName: testEqualsWithSameNameCategory
Description: This test is meant to check whether the equals method returns true when a Category object is compared with another Category object having the same name.
Execution:
  Arrange: Create two Category objects with the same name.
  Act: Invoke equals method on one Category object and pass the other Category object as parameter.
  Assert: Assert that the equals method returns true.
Validation:
  The equals method should return true when a Category object is compared with another Category object having the same name. This is expected as Category objects with the same name are considered equal.
"""
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.junit.Test;
import static org.junit.Assert.*;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.util.Objects;

public class CategoryEqualsTest {

	@Test
	@org.junit.experimental.categories.Category(Categories.invalid.class)
	public void testEqualsWithNullObject() {
		Category category1 = new Category("name1", "description1");
		assertFalse(category1.equals(null));
	}

	@Test
	@org.junit.experimental.categories.Category(Categories.valid.class)
	public void testEqualsWithItself() {
		Category category1 = new Category("name1", "description1");
		assertTrue(category1.equals(category1));
	}

	@Test
	@org.junit.experimental.categories.Category(Categories.invalid.class)
	public void testEqualsWithDifferentClassObject() {
		Category category1 = new Category("name1", "description1");
		Object obj = new Object();
		assertFalse(category1.equals(obj));
	}

	@Test
	@org.junit.experimental.categories.Category(Categories.invalid.class)
	public void testEqualsWithDifferentNameCategory() {
		Category category1 = new Category("name1", "description1");
		Category category2 = new Category("name2", "description2");
		assertFalse(category1.equals(category2));
	}

	@Test
	@org.junit.experimental.categories.Category(Categories.valid.class)
	public void testEqualsWithSameNameCategory() {
		Category category1 = new Category("name1", "description1");
		Category category2 = new Category("name1", "description2");
		assertTrue(category1.equals(category2));
	}

}