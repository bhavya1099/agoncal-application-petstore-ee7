// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620
ROOST_METHOD_HASH=calculateAge_a25422ac46
ROOST_METHOD_SIG_HASH=calculateAge_eda2a8b4ab
Based on the provided information and the calculateAge() method, here are several test scenarios for the Customer entity:
Scenario 1: Calculate Age for Customer with Valid Date of Birth
Details:
  TestName: calculateAgeWithValidDateOfBirth
  Description: Test the calculation of age when a valid date of birth is provided.
Execution:
  Arrange: Create a Customer instance with a date of birth set to 20 years ago from the current date.
  Act: Call the calculateAge() method on the customer instance.
  Assert: Verify that the age field of the customer is set to 20.
Validation:
  This test ensures that the calculateAge method correctly calculates the age for a customer with a valid date of birth. It's crucial for accurately representing customer information in the application.
Scenario 2: Calculate Age for Customer with Null Date of Birth
Details:
  TestName: calculateAgeWithNullDateOfBirth
  Description: Test the behavior of calculateAge when the date of birth is null.
Execution:
  Arrange: Create a Customer instance with a null date of birth.
  Act: Call the calculateAge() method on the customer instance.
  Assert: Verify that the age field of the customer is set to null.
Validation:
  This test verifies that the method handles null date of birth correctly by setting the age to null. It's important for robustness and handling incomplete customer data.
Scenario 3: Calculate Age for Customer Born on Leap Year
Details:
  TestName: calculateAgeForCustomerBornOnLeapYear
  Description: Test age calculation for a customer born on February 29th of a leap year.
Execution:
  Arrange: Create a Customer instance with a date of birth set to February 29th of a leap year (e.g., 2000).
  Act: Call the calculateAge() method on the customer instance.
  Assert: Verify that the age is calculated correctly, considering leap years.
Validation:
  This test ensures that the age calculation handles leap years correctly, which is crucial for accurate age representation for customers born on February 29th.
Scenario 4: Calculate Age for Customer with Birthday Today
Details:
  TestName: calculateAgeForCustomerWithBirthdayToday
  Description: Test age calculation when the customer's birthday is today.
Execution:
  Arrange: Create a Customer instance with a date of birth set to today's date in a previous year.
  Act: Call the calculateAge() method on the customer instance.
  Assert: Verify that the age is calculated correctly, considering it's the customer's birthday.
Validation:
  This test verifies that the age calculation is accurate on the customer's birthday, ensuring the age doesn't prematurely increment.
Scenario 5: Calculate Age for Customer with Birthday Tomorrow
Details:
  TestName: calculateAgeForCustomerWithBirthdayTomorrow
  Description: Test age calculation when the customer's birthday is tomorrow.
Execution:
  Arrange: Create a Customer instance with a date of birth set to tomorrow's date in a previous year.
  Act: Call the calculateAge() method on the customer instance.
  Assert: Verify that the age is calculated correctly, not yet incrementing for the upcoming birthday.
Validation:
  This test ensures that the age calculation doesn't prematurely increment the age before the actual birthday occurs.
Scenario 6: Calculate Age for Customer Born on December 31st
Details:
  TestName: calculateAgeForCustomerBornOnDecember31st
  Description: Test age calculation for a customer born on the last day of the year.
Execution:
  Arrange: Create a Customer instance with a date of birth set to December 31st of a previous year.
  Act: Call the calculateAge() method on the customer instance.
  Assert: Verify that the age is calculated correctly, considering the edge case of year-end birth dates.
Validation:
  This test verifies that the age calculation handles year-end birthdates correctly, which is important for accurate age representation at the turn of the year.
These scenarios cover various aspects of the calculateAge() method, including normal cases, edge cases, and potential error conditions. They aim to ensure the method's correctness and robustness in different situations.
*/
// ********RoostGPT********
package org.agoncal.application.petstore.model;

import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.*;
import java.util.Calendar;
import java.util.Date;
import org.agoncal.application.petstore.constraints.Email;
import org.agoncal.application.petstore.constraints.Login;
import javax.persistence.*;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.security.MessageDigest;
import java.util.*;
import org.junit.experimental.categories.Category;

@Category({ Categories.calculateAge.class })
public class CustomerCalculateAgeTest {

	private Customer customer;

	@Before
	public void setUp() {
		customer = new Customer();
	}

	@Test
	public void calculateAgeWithValidDateOfBirth() {
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.YEAR, -20);
		customer.setDateOfBirth(cal.getTime());

		customer.calculateAge();

		assertEquals(Integer.valueOf(20), customer.getAge());
	}

	@Test
	public void calculateAgeWithNullDateOfBirth() {
		customer.setDateOfBirth(null);

		customer.calculateAge();

		assertNull(customer.getAge());
	}

	@Test
	public void calculateAgeForCustomerBornOnLeapYear() {
		Calendar cal = Calendar.getInstance();
		cal.set(2000, Calendar.FEBRUARY, 29);
		customer.setDateOfBirth(cal.getTime());

		customer.calculateAge();

		int expectedAge = Calendar.getInstance().get(Calendar.YEAR) - 2000;
		assertEquals(Integer.valueOf(expectedAge), customer.getAge());
	}

	@Test
	public void calculateAgeForCustomerWithBirthdayToday() {
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.YEAR, cal.get(Calendar.YEAR) - 25);
		customer.setDateOfBirth(cal.getTime());

		customer.calculateAge();

		assertEquals(Integer.valueOf(25), customer.getAge());
	}

	@Test
	public void calculateAgeForCustomerWithBirthdayTomorrow() {
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DAY_OF_YEAR, 1);
		cal.set(Calendar.YEAR, cal.get(Calendar.YEAR) - 30);
		customer.setDateOfBirth(cal.getTime());

		customer.calculateAge();

		assertEquals(Integer.valueOf(29), customer.getAge());
	}

	@Test
	public void calculateAgeForCustomerBornOnDecember31st() {
		Calendar cal = Calendar.getInstance();
		cal.set(cal.get(Calendar.YEAR) - 40, Calendar.DECEMBER, 31);
		customer.setDateOfBirth(cal.getTime());

		customer.calculateAge();

		assertEquals(Integer.valueOf(39), customer.getAge());
	}

}