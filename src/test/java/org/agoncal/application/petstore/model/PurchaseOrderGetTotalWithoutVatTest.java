
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test_clone using AI Type  and AI Model

ROOST_METHOD_HASH=getTotalWithoutVat_a6b5a3cff8
ROOST_METHOD_SIG_HASH=getTotalWithoutVat_a14bc1febc

"""
Scenario 1: Verify getTotalWithoutVat() when totalWithoutVat is not null

Details:
  TestName: testGetTotalWithoutVatWhenValueIsNotNull
  Description: This test is meant to check whether the getTotalWithoutVat() method works correctly when totalWithoutVat is not null.
Execution:
  Arrange: Initialize a PurchaseOrder object and set totalWithoutVat with a specific value.
  Act: Invoke the getTotalWithoutVat() method.
  Assert: Use JUnit assertions to compare the returned value against the original value set.
Validation:
  This assertion aims to verify the correct retrieval of the totalWithoutVat value. The expected result should match the set value since the getter method should return the same value that was set.

Scenario 2: Verify getTotalWithoutVat() when totalWithoutVat is null

Details:
  TestName: testGetTotalWithoutVatWhenValueIsNull
  Description: This test is meant to check whether the getTotalWithoutVat() method works correctly when totalWithoutVat is null.
Execution:
  Arrange: Initialize a PurchaseOrder object without setting totalWithoutVat.
  Act: Invoke the getTotalWithoutVat() method.
  Assert: Use JUnit assertions to check that the returned value is null.
Validation:
  This assertion aims to verify the correct retrieval of the totalWithoutVat value. The expected result is null since no value was set for totalWithoutVat.

Scenario 3: Verify getTotalWithoutVat() after changing its value

Details:
  TestName: testGetTotalWithoutVatAfterValueChange
  Description: This test is meant to check whether the getTotalWithoutVat() method works correctly after totalWithoutVat's value has been changed.
Execution:
  Arrange: Initialize a PurchaseOrder object and set totalWithoutVat with a specific value. Then change this value to a new one.
  Act: Invoke the getTotalWithoutVat() method.
  Assert: Use JUnit assertions to compare the returned value against the new value set.
Validation:
  This assertion aims to verify the correct retrieval of the totalWithoutVat value. The expected result should match the new value since the getter method should return the latest value that was set.
"""
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import javax.persistence.*;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

class PurchaseOrderGetTotalWithoutVatTest {

	@Test
	@Tag("valid")
	void testGetTotalWithoutVatWhenValueIsNotNull() {
		// Arrange
		PurchaseOrder purchaseOrder = new PurchaseOrder();
		Float expectedValue = 100.50f;
		purchaseOrder.setTotalWithoutVat(expectedValue);
		// Act
		Float actualValue = purchaseOrder.getTotalWithoutVat();
		// Assert
		assertEquals(expectedValue, actualValue);
	}

	@Test
	@Tag("invalid")
	void testGetTotalWithoutVatWhenValueIsNull() {
		// Arrange
		PurchaseOrder purchaseOrder = new PurchaseOrder();
		// Act
		Float actualValue = purchaseOrder.getTotalWithoutVat();
		// Assert
		assertNull(actualValue);
	}

	@Test
	@Tag("boundary")
	void testGetTotalWithoutVatAfterValueChange() {
		// Arrange
		PurchaseOrder purchaseOrder = new PurchaseOrder();
		purchaseOrder.setTotalWithoutVat(100.50f);
		Float expectedValue = 200.50f;
		purchaseOrder.setTotalWithoutVat(expectedValue);
		// Act
		Float actualValue = purchaseOrder.getTotalWithoutVat();
		// Assert
		assertEquals(expectedValue, actualValue);
	}

}