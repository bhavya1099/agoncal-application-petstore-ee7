
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test_clone using AI Type  and AI Model

ROOST_METHOD_HASH=getDateOfBirth_c71a70f64e
ROOST_METHOD_SIG_HASH=getDateOfBirth_2c09ea3434

"""
  Scenario 1: Test to ensure the correct Date of Birth is returned

  Details:
    TestName: testGetDateOfBirth.
    Description: The test is meant to check if the correct Date of Birth is returned for a given Customer. The method is expected to return the date of birth of the customer as set in the Customer object.
  Execution:
    Arrange: Create a Customer object and set a specific date of birth using setDateOfBirth() method.
    Act: Invoke the getDateOfBirth() method on the created Customer object.
    Assert: Use JUnit assertions to compare the returned date against the date that was set.
  Validation:
    The assertion verifies that the date returned by getDateOfBirth() is identical to the date set initially. This is necessary to ensure that the date of birth of the customer is stored and retrieved correctly.

  Scenario 2: Test to handle null Date of Birth

  Details:
    TestName: testNullDateOfBirth.
    Description: The test is meant to check if the method handles null Date of Birth correctly. The method is expected to return null if the date of birth was not set for a Customer.
  Execution:
    Arrange: Create a Customer object without setting a date of birth.
    Act: Invoke the getDateOfBirth() method on the created Customer object.
    Assert: Use JUnit assertions to confirm that the returned date is null.
  Validation:
    The assertion verifies that the method returns null when the date of birth is not set. This is important to ensure that the method handles null values without throwing exceptions.

  Scenario 3: Test to ensure the Date of Birth is not mutable

  Details:
    TestName: testImmutabilityOfDateOfBirth.
    Description: The test is meant to check if the Date of Birth returned is not mutable. The method is expected to return a copy of the date of birth to prevent mutable access to the field.
  Execution:
    Arrange: Create a Customer object and set a specific date of birth using setDateOfBirth() method.
    Act: Invoke the getDateOfBirth() method on the created Customer object and try to change the returned Date.
    Assert: Use JUnit assertions to compare the date of birth in the Customer object against the changed date.
  Validation:
    The assertion verifies that the date of birth in the Customer object remains unchanged even after the returned Date is modified. This is crucial to ensure the immutability of the Date of Birth field.
"""
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.agoncal.application.petstore.model.Customer;
import org.agoncal.application.petstore.model.Address;
import java.util.Date;
import java.util.Calendar;
import java.util.GregorianCalendar;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.*;
import org.agoncal.application.petstore.constraints.Email;
import org.agoncal.application.petstore.constraints.Login;
import javax.persistence.*;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.security.MessageDigest;
import java.util.*;

public class CustomerGetDateOfBirthTest {

	@Test
	@Tag("valid")
	public void testGetDateOfBirth() {
		// Arrange
		Customer customer = new Customer();
		Date dob = new GregorianCalendar(1990, Calendar.JANUARY, 1).getTime();
		customer.setDateOfBirth(dob);
		// Act
		Date returnedDob = customer.getDateOfBirth();
		// Assert
		assertEquals(dob, returnedDob, "The returned date of birth should match the one set");
	}

	@Test
	@Tag("invalid")
	public void testNullDateOfBirth() {
		// Arrange
		Customer customer = new Customer();
		// Act
		Date returnedDob = customer.getDateOfBirth();
		// Assert
		assertNull(returnedDob, "The returned date of birth should be null as it was not set");
	}

	@Test
	@Tag("boundary")
	public void testImmutabilityOfDateOfBirth() {
		// Arrange
		Customer customer = new Customer();
		Date dob = new GregorianCalendar(1990, Calendar.JANUARY, 1).getTime();
		customer.setDateOfBirth(dob);
		// Act
		Date returnedDob = customer.getDateOfBirth();
		returnedDob.setTime(System.currentTimeMillis());
		// Assert
		assertEquals(dob, customer.getDateOfBirth(),
				"The date of birth in the customer object should not be affected by changes to the returned Date object");
	}

}