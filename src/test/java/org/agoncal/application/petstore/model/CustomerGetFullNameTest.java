
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test_clone using AI Type  and AI Model

ROOST_METHOD_HASH=getFullName_15581f7a50
ROOST_METHOD_SIG_HASH=getFullName_a3a8c40aad

"""
Scenario 1: Test getFullName method with valid first name and last name

Details:
  TestName: shouldReturnFullNameWhenFirstAndLastNameAreValid
  Description: This test case is meant to check if the getFullName method returns the correct full name when both first and last names are valid.

Execution:
  Arrange: Create a Customer object and set the firstName and lastName fields.
  Act: Invoke the getFullName method on the created Customer object.
  Assert: Use JUnit assertions to compare the actual result against the expected full name.

Validation:
  The assertion aims to verify that the getFullName method correctly concatenates the first name and last name with a space in between. The expected result is the correct full name, and it is significant in the context of displaying or using the customer's full name in the application.

Scenario 2: Test getFullName method when first name is null

Details:
  TestName: shouldReturnOnlyLastNameWhenFirstNameIsNull
  Description: This test case is meant to check if the getFullName method returns only the last name when the first name is null.

Execution:
  Arrange: Create a Customer object and set the lastName field while leaving the firstName as null.
  Act: Invoke the getFullName method on the created Customer object.
  Assert: Use JUnit assertions to compare the actual result against the expected last name.

Validation:
  The assertion aims to verify that the getFullName method correctly handles a null first name and returns only the last name. The expected result is the last name, and it is significant in the context of ensuring the application can handle null values without crashing.

Scenario 3: Test getFullName method when last name is null

Details:
  TestName: shouldReturnOnlyFirstNameWhenLastNameIsNull
  Description: This test case is meant to check if the getFullName method returns only the first name when the last name is null.

Execution:
  Arrange: Create a Customer object and set the firstName field while leaving the lastName as null.
  Act: Invoke the getFullName method on the created Customer object.
  Assert: Use JUnit assertions to compare the actual result against the expected first name.

Validation:
  The assertion aims to verify that the getFullName method correctly handles a null last name and returns only the first name. The expected result is the first name, and it is significant in the context of ensuring the application can handle null values without crashing.

Scenario 4: Test getFullName method when both first and last names are null

Details:
  TestName: shouldReturnEmptyStringWhenFirstAndLastNameAreNull
  Description: This test case is meant to check if the getFullName method returns an empty string when both first and last names are null.

Execution:
  Arrange: Create a Customer object and do not set the firstName and lastName fields.
  Act: Invoke the getFullName method on the created Customer object.
  Assert: Use JUnit assertions to compare the actual result against an empty string.

Validation:
  The assertion aims to verify that the getFullName method correctly handles null first and last names and returns an empty string. The expected result is an empty string, and it is significant in the context of ensuring the application can handle null values without crashing.
"""
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;
import org.agoncal.application.petstore.constraints.Email;
import org.agoncal.application.petstore.constraints.Login;
import javax.persistence.*;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.security.MessageDigest;
import java.util.*;

public class CustomerGetFullNameTest {

	private Customer customer;

	@BeforeEach
	public void setup() {
		customer = new Customer();
	}

	@Test
	@Tag("valid")
	public void shouldReturnFullNameWhenFirstAndLastNameAreValid() {
		// Arrange
		customer.setFirstName("John");
		customer.setLastName("Doe");
		// Act
		String fullName = customer.getFullName();
		// Assert
		assertEquals("John Doe", fullName, "The full name does not match the expected value");
	}

	@Test
	@Tag("valid")
	public void shouldReturnOnlyLastNameWhenFirstNameIsNull() {
		// Arrange
		customer.setLastName("Doe");
		// Act
		String fullName = customer.getFullName();
		// Assert
		assertEquals(" Doe", fullName, "The full name does not match the expected value");
	}

	@Test
	@Tag("valid")
	public void shouldReturnOnlyFirstNameWhenLastNameIsNull() {
		// Arrange
		customer.setFirstName("John");
		// Act
		String fullName = customer.getFullName();
		// Assert
		assertEquals("John ", fullName, "The full name does not match the expected value");
	}

	@Test
	@Tag("valid")
	public void shouldReturnEmptyStringWhenFirstAndLastNameAreNull() {
		// Act
		String fullName = customer.getFullName();
		// Assert
		assertEquals(" ", fullName, "The full name does not match the expected value");
	}

}