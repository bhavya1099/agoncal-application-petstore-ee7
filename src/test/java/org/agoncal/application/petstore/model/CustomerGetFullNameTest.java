// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model

ROOST_METHOD_HASH=getFullName_15581f7a50
ROOST_METHOD_SIG_HASH=getFullName_a3a8c40aad

```
Scenario 1: Both names are non-null and non-empty

Details:
  TestName: testGetFullNameWithValidNames
  Description: This test verifies that the getFullName method correctly concatenates a non-null and non-empty first name and last name with a space in between.
Execution:
  Arrange: Set the firstName and lastName of a Customer instance to "John" and "Doe" respectively.
  Act: Call the getFullName method on the Customer instance.
  Assert: Assert that the result equals "John Doe".
Validation:
  The assertion checks that the full name is correctly formatted as "First Last". This is crucial for displaying user names correctly across the application where a full name is required.

Scenario 2: First name is null

Details:
  TestName: testGetFullNameWithNullFirstName
  Description: This test ensures that the getFullName method handles the case where the first name is null by not throwing any exception and properly concatenating the names.
Execution:
  Arrange: Set the firstName of a Customer instance to null and lastName to "Doe".
  Act: Call the getFullName method on the Customer instance.
  Assert: Assert that the result equals "null Doe".
Validation:
  The assertion verifies that the method handles null values gracefully, combining them directly into the full name. This scenario is important for ensuring the application's robustness in case of incomplete user data.

Scenario 3: Last name is null

Details:
  TestName: testGetFullNameWithNullLastName
  Description: This test checks that the getFullName method correctly handles cases where the last name is null.
Execution:
  Arrange: Set the firstName of a Customer instance to "John" and lastName to null.
  Act: Call the getFullName method on the Customer instance.
  Assert: Assert that the result equals "John null".
Validation:
  This test confirms that null last names do not cause errors and are handled appropriately, ensuring that the application can manage users who have only provided a first name.

Scenario 4: Both names are empty

Details:
  TestName: testGetFullNameWithEmptyNames
  Description: This test examines the behavior of the getFullName method when both first and last names are empty strings.
Execution:
  Arrange: Set both firstName and lastName of a Customer instance to "".
  Act: Call the getFullName method on the Customer instance.
  Assert: Assert that the result equals " ".
Validation:
  The assertion checks that the method correctly handles empty strings, essential for cases where user data might not be fully entered or is temporarily blank.

Scenario 5: First name is empty and last name is non-empty

Details:
  TestName: testGetFullNameWithEmptyFirstName
  Description: This test ensures that the getFullName method can handle cases where the first name is an empty string but the last name is valid.
Execution:
  Arrange: Set the firstName of a Customer instance to "" and lastName to "Doe".
  Act: Call the getFullName method on the Customer instance.
  Assert: Assert that the result equals " Doe".
Validation:
  This scenario tests the method's ability to handle empty first names without disrupting the overall formatting of the full name, important for user display and data processing consistency.

Scenario 6: First name is non-empty and last name is empty

Details:
  TestName: testGetFullNameWithEmptyLastName
  Description: This test checks the getFullName method's response when the last name is an empty string and the first name is valid.
Execution:
  Arrange: Set the firstName of a Customer instance to "John" and lastName to "".
  Act: Call the getFullName method on the Customer instance.
  Assert: Assert that the result equals "John ".
Validation:
  This test confirms that the method handles empty last names effectively, ensuring consistent user data representation even when parts of the name are missing.
```
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.assertEquals;
import org.agoncal.application.petstore.constraints.Email;
import org.agoncal.application.petstore.constraints.Login;
import javax.persistence.*;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.security.MessageDigest;
import java.util.*;

public class CustomerGetFullNameTest {

	@Test
	@Category(Categories.valid.class)
	public void testGetFullNameWithValidNames() {
		Customer customer = new Customer();
		customer.setFirstName("John");
		customer.setLastName("Doe");
		assertEquals("John Doe", customer.getFullName());
	}

	@Test
	@Category(Categories.invalid.class)
	public void testGetFullNameWithNullFirstName() {
		Customer customer = new Customer();
		customer.setFirstName(null);
		customer.setLastName("Doe");
		assertEquals("null Doe", customer.getFullName());
	}

	@Test
	@Category(Categories.invalid.class)
	public void testGetFullNameWithNullLastName() {
		Customer customer = new Customer();
		customer.setFirstName("John");
		customer.setLastName(null);
		assertEquals("John null", customer.getFullName());
	}

	@Test
	@Category(Categories.boundary.class)
	public void testGetFullNameWithEmptyNames() {
		Customer customer = new Customer();
		customer.setFirstName("");
		customer.setLastName("");
		assertEquals(" ", customer.getFullName());
	}

	@Test
	@Category(Categories.boundary.class)
	public void testGetFullNameWithEmptyFirstName() {
		Customer customer = new Customer();
		customer.setFirstName("");
		customer.setLastName("Doe");
		assertEquals(" Doe", customer.getFullName());
	}

	@Test
	@Category(Categories.boundary.class)
	public void testGetFullNameWithEmptyLastName() {
		Customer customer = new Customer();
		customer.setFirstName("John");
		customer.setLastName("");
		assertEquals("John ", customer.getFullName());
	}

}