// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model

ROOST_METHOD_HASH=getLastName_026f18c38b
ROOST_METHOD_SIG_HASH=getLastName_4814a2dee7

```
Scenario 1: Retrieve Last Name When Set

Details:
  TestName: retrieveLastNameWhenSet
  Description: This test checks if the getLastName method correctly retrieves the last name that has been previously set for a Customer object.
Execution:
  Arrange: Create a Customer object and set its last name using the setLastName method.
  Act: Call the getLastName method on the Customer object.
  Assert: Verify that the returned last name matches the one set.
Validation:
  The assertion verifies that the getLastName method correctly returns the last name that was set. This confirms the methodâ€™s ability to accurately fetch the customer's last name, which is crucial for any operations or displays involving the customer's identity.

Scenario 2: Retrieve Last Name When Not Set

Details:
  TestName: retrieveLastNameWhenNotSet
  Description: This test checks if the getLastName method correctly handles the scenario where no last name has been set for a Customer object.
Execution:
  Arrange: Create a Customer object without setting its last name.
  Act: Call the getLastName method on the Customer object.
  Assert: Verify that the returned last name is null.
Validation:
  The assertion checks that the getLastName method returns null when no last name has been set. This test is important to ensure that the method handles null values properly, preventing potential NullPointerExceptions in parts of the application that use this method.

Scenario 3: Retrieve Last Name After Changing It

Details:
  TestName: retrieveLastNameAfterChangingIt
  Description: This test verifies that the getLastName method reflects updates when the last name of a Customer object is changed after being initially set.
Execution:
  Arrange: Create a Customer object and set its last name. Change this last name to a new value.
  Act: Call the getLastName method on the Customer object.
  Assert: Verify that the returned last name matches the new last name.
Validation:
  The assertion ensures that the getLastName method returns the updated last name. This test is significant for verifying that changes to the customer's last name are accurately reflected, ensuring data integrity and consistency within the application.

Scenario 4: Consistency of Last Name Retrieval

Details:
  TestName: consistencyOfLastNameRetrieval
  Description: This test ensures that multiple calls to getLastName return consistent results, assuming no changes are made to the last name in between calls.
Execution:
  Arrange: Create a Customer object and set a specific last name.
  Act: Call the getLastName method multiple times on the same Customer object.
  Assert: Verify that all calls return the same last name.
Validation:
  The assertion checks for consistency in the results of the getLastName method across multiple invocations. This test is crucial for confirming the reliability and stability of the getLastName method, which should not exhibit any erratic behavior under consistent conditions.
```
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.junit.Test;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertEquals;
import org.junit.experimental.categories.Category;
import org.agoncal.application.petstore.constraints.Email;
import org.agoncal.application.petstore.constraints.Login;
import javax.persistence.*;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.security.MessageDigest;
import java.util.*;

public class CustomerGetLastNameTest {

	@Test
	@Category(Categories.valid.class)
	public void retrieveLastNameWhenSet() {
		Customer customer = new Customer();
		customer.setLastName("Smith");
		assertEquals("Smith", customer.getLastName());
	}

	@Test
	@Category(Categories.valid.class)
	public void retrieveLastNameWhenNotSet() {
		Customer customer = new Customer();
		assertNull(customer.getLastName());
	}

	@Test
	@Category(Categories.valid.class)
	public void retrieveLastNameAfterChangingIt() {
		Customer customer = new Customer();
		customer.setLastName("Smith");
		customer.setLastName("Jones");
		assertEquals("Jones", customer.getLastName());
	}

	@Test
	@Category(Categories.valid.class)
	public void consistencyOfLastNameRetrieval() {
		Customer customer = new Customer();
		customer.setLastName("Smith");
		assertEquals("Smith", customer.getLastName());
		assertEquals("Smith", customer.getLastName());
		assertEquals("Smith", customer.getLastName());
	}

}