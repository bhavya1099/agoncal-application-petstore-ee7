
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-3.5-turbo

ROOST_METHOD_HASH=getLastName_026f18c38b
ROOST_METHOD_SIG_HASH=getLastName_4814a2dee7

```
Scenario 1: Test retrieving last name when it is not null

Details:
  TestName: testRetrievingLastNameWhenNotNull
  Description: This test verifies that the getLastName method returns the correct last name when it is not null.
  Execution:
    Arrange: Set a non-null value for the last name field in the Customer entity.
    Act: Call the getLastName method.
    Assert: Ensure that the returned last name matches the set value.
  Validation:
    The assertion confirms that the getLastName method correctly retrieves the last name when it is set, validating the basic functionality of the method.

Scenario 2: Test retrieving last name when it is null

Details:
  TestName: testRetrievingLastNameWhenNull
  Description: This test validates the behavior of the getLastName method when the last name is null.
  Execution:
    Arrange: Set the last name field in the Customer entity to null.
    Act: Invoke the getLastName method.
    Assert: Verify that the returned last name is null.
  Validation:
    This scenario ensures that the getLastName method handles and returns null appropriately when the last name is not set, testing the method's null handling.

Scenario 3: Test retrieving last name with special characters

Details:
  TestName: testRetrievingLastNameWithSpecialCharacters
  Description: This test checks the ability of the getLastName method to handle and return a last name with special characters.
  Execution:
    Arrange: Assign a last name containing special characters to the Customer entity.
    Act: Call the getLastName method.
    Assert: Validate that the retrieved last name with special characters matches the assigned value.
  Validation:
    By testing the getLastName method with special characters, this scenario ensures that the method can correctly process and return last names with non-alphanumeric characters.

Scenario 4: Test retrieving last name with leading and trailing whitespaces

Details:
  TestName: testRetrievingLastNameWithWhitespaces
  Description: This test examines the behavior of the getLastName method when the last name contains leading or trailing whitespaces.
  Execution:
    Arrange: Set a last name with leading and trailing whitespaces in the Customer entity.
    Act: Invoke the getLastName method.
    Assert: Confirm that the returned last name does not include any leading or trailing whitespaces.
  Validation:
    This scenario validates that the getLastName method trims any leading or trailing whitespaces from the retrieved last name, ensuring consistency in data handling.

Scenario 5: Test retrieving last name for an empty string

Details:
  TestName: testRetrievingLastNameForEmptyString
  Description: This test verifies the behavior of the getLastName method when the last name is an empty string.
  Execution:
    Arrange: Set an empty string as the last name in the Customer entity.
    Act: Call the getLastName method.
    Assert: Check that the returned last name is an empty string.
  Validation:
    The test ensures that the getLastName method correctly handles and returns an empty string as the last name, testing the method's response to empty values.
```
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.agoncal.application.petstore.constraints.Email;
import org.agoncal.application.petstore.constraints.Login;
import javax.persistence.*;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.security.MessageDigest;
import java.util.*;

public class CustomerGetLastNameTest {

	private Customer customer;

	@Test
	@Category(Categories.valid.class)
	public void testRetrievingLastNameWhenNotNull() {
		customer = new Customer();
		customer.setLastName("Doe");
		assert "Doe".equals(customer.getLastName());
	}

	@Test
	@Category(Categories.valid.class)
	public void testRetrievingLastNameWhenNull() {
		customer = new Customer();
		customer.setLastName(null);
		assert customer.getLastName() == null;
	}

	@Test
	@Category(Categories.valid.class)
	public void testRetrievingLastNameWithSpecialCharacters() {
		customer = new Customer();
		customer.setLastName("Doe@123");
		assert "Doe@123".equals(customer.getLastName());
	}

	@Test
	@Category(Categories.valid.class)
	public void testRetrievingLastNameWithWhitespaces() {
		customer = new Customer();
		customer.setLastName("  Doe  ");
		assert "Doe".equals(customer.getLastName());
	}

	@Test
	@Category(Categories.valid.class)
	public void testRetrievingLastNameForEmptyString() {
		customer = new Customer();
		customer.setLastName("");
		assert "".equals(customer.getLastName());
	}

}